server:
  port: 8080
  shutdown: graceful
  servlet:
    context-path: /bpw
    session.temout: 30m
spring:
  profiles:
    active:
      - jdbc
      - ${SPRING_PROFILES_ACTIVE:local}  
  application:.name: bpw-camel-config-server
  liquibase:
    enabled: false
  jpa:
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.OracleDialect
    show-sql: true
    properties.hibernate.jdbc.time-zone: EST
  datasource:
    platform: oracle
   # url: jdbc:h2:mem:configdb
   # driver-class-name: org.h2.Driver
   # username: sa
   # password: sa
   # platform: postgresql
#    driver-class-name: org.postgresql.Driver
#    url: jdbc:postgresql://localhost:5432/postgres
#    username: postgres
#    password: 123456
    driver-class-name: oracle.jdbc.OracleDriver
    url: jdbc:oracle:thin:@localhost:1521/FREE
    username: C##CAMEL
    password: Passw0rd
    hikari:
      connection-timeout: 5000
      maximum-pool-size: 10
  cloud:
    config:
      server:
        jdbc:
          sql: SELECT PROP_KEY, PROP_VALUE from APP_PROPERTIES where APPLICATION=? and PROFILE=? and LABEL=?
          order: 1
        # prefix: config
  security:
    user:
      name: config@admin.com
      password: config
    oauth2:
      # For SPA
      client:
        provider:
          azure:
            issuer-uri: https://login.microsoftonline.com/xxxx/v2.0
            # When using JWT-based authentication, Spring Security will use, by default, the standard sub claim value as the Principal‘s name.
            # Looking at the claims, AzureAD populates this field with an internal identifier, which is unfit for display purposes.
            # so choose one of the available attributes available and put its name on the provider’s user-name-attribute property:
            user-name-attribute: name
          auth0:
            issuer-uri: https://xxxx.auth0.com/
        google:
          clientId: your_client_id
          clientSecret: your_client_secret
          redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
          scope:
            - email
            - profile
        facebook:
          clientId: your_client_id
          clientSecret: your_client_secret
          redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
          scope:
            - email
            - public_profile
        github:
          clientId: your_client_id
          clientSecret: your_client_secret
          redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
          scope:
            - user:email
            - read:user
        registration:
          azure-dev:
            provider: azure
            client-id: your_client_id
            client-secret: your_client_secret
            scope:
              - openid
              - email
              - profile
          auth0-confidential-user:
            authorization-grant-type: authorization_code
            client-name: Auth0
            client-id: your_client_id
            client-secret: your_client_secret
            provider: auth0
            scope: openid,profile,email,offline_access

      # multitenancy: https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/multitenancy.html
      # For API single tenant
      resourceserve:
        jwt:
          # https://login.microsoftonline.com/{tenant-id}/v2.0
          # https://login.microsoftonline.com/common/discovery/keys https://login.microsoftonline.com/{tenant_id}/discovery/keys?appid={client_id}
          issuer-uri: https://login.microsoftonline.com/xxx/v2.0
  liquibase.enabled: false
  liquibase.contexts: ${SPRING_PROFILES_ACTIVE:local}
liquibase.change-log: classpath:/db/changelog/db.changelog-master.yaml      
management:
  endpoints:
    health:
      enabled: true
      show-details: always
      # expose liveness/readiness probes
      probes:
        enabled: true
    web:
      # base-path: 
      exposure.include: health,info,hawtio,jolokia
  # Information for Spring Boot Info endpoint
  info:
    env.enabled: true
    java.enabled: true
    app.name: ${spring.application.name}
  server.port: ${server.port}

logging.level:
  com.example: DEBUG
  io.hawt: INFO
  org.springframework: WARN

camel:
  springboot.name: ${spring.application.name}

# Uncomment these properties to enable the Camel plugin Trace tab
#camel.springboot.tracing=true
#camel.springboot.backlog-tracing=true
#camel.springboot.use-breadcrumb=true

hawtio:
  authenticationEnabled: false
  http:
    enableCORS: true
    proxyAllowlist: "*"      
feign:
  client:
    config:
      default:
        connectTimeout: 15000
        readTimeout: 15000
        loggerLevel: basic
        # requestInterceptors: ClientBearerRequestInterceptor.java
# Group mapping
bpw:
  openfeign:.client.api.url: http://localhost:8888//my/spring/admin/resource
  account:
    datasource:
      # url: jdbc:mysql://mysql:3306/wcm_bpm?allowPublicKeyRetrieval=true&useSSL=false&autoReconnect=true&nullNamePatternMatchesAll=true
      url: ${ACCOUNT_DS_URL:jdbc:mysql://localhost:3306/account?allowPublicKeyRetrieval=true&useSSL=false&autoReconnect=true&nullNamePatternMatchesAll=true}
      # url: jdbc:h2:file:./h2/wcm_bpm/data;DB_CLOSE_ON_EXIT=FALSE
      username: ${ACCOUNT_DS_USER_NAME:account}
      password: ${ACCOUNT_DS_USER_PASSWORD:Passw0rd}
      driver-class-name: ${ACCOUNT_DS_DRIVER_CLASS:com.mysql.cj.jdbc.Driver}
    liquibase:
      change-log: classpath:/db/changelog/account/changelog-master.yaml
    # auth:
    # tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    # tokenExpirationMsec: 864000000
    #oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    # authorizedRedirectUris:
    #   - http://wcm-authoring:3009/oauth2/redirect
    #   - http://bpm-ui:4009/oauth2/redirect
    #   - http://mysite:6009/oauth2/redirect
    #   - http://wcm-minimal:7009/oauth2/redirect
    #   - http://gateway-ui:5009/oauth2/redirect
    #   - myandroidapp://oauth2/redirect
    #   - myiosapp://oauth2/redirect
  # application-url: http://localhost:19090
  # oauth2-authentication-success-url: http://localhost:19090/social-login-success?token=
  # application-url: http://localhost:3000
  # oauth2-authentication-success-url: http://localhost:3000/oauth2/redirect?token=
  cors:
    # Comma separated values of CORS allowedOrigins
    # If this property is not given, CORS is not configured
    allowed-origins: ${BPW_ALLOWED_ORIGIN:http://wcm-authoring:3009, http://wcm-authoring:28080, http://bpm-ui:4009, http://bpm-ui:28081, http://gateway-ui:5009, http://gateway-ui:28083, http://mysite:6009, http://mysite:28082,, http://wcm-minimal:7009, http://wcm-minimal:28083}
  #    exposedHeaders:
  #      - Cache-Control
  #      - Connection
  #      - Content-Type
  #      - Date
  #      - Expires
  #      - Pragma,Server
  #      - Set-Cookie
  #      - Transfer-Encoding
  #      - X-Content-Type-Options
  #      - X-XSS-Protection
  #      - X-Frame-Options
  #      - X-Application-Context
  #      - lang
  #      - Authorization
  recaptcha:
    sitekey: 6LdwxRcUAAAAABkhOGWQXhl9FsR27D5YUJRuGzx0
    secretkey: 6LdwxRcUAAAAADaG0Eo1qkYCco15cnngiBoBt2IO

  jwt:
    # An aes-128-cbc key generated at https://asecuritysite.com/encryption/keygen (take the "key" field)
    secret: 841D8A6C80CBA4FCAD32D5367C18C53B
    # expiration-millis: 864000000 # 10 days
    # short-lived-millis: 120000   # two minutes
    short-lived-millis: 864000000 # 10 days
  azure:
    authorization:
      group-to-authorities:
        "ceef656a-fca9-49b6-821b-f7543b7065cb": BAELDUNG_RW
        "eaaecb69-ccbc-4143-b111-7dd1ce1d99f1": BAELDUNG_RO,BAELDUNG_ADMIN
  api-key: bpw-api-key
