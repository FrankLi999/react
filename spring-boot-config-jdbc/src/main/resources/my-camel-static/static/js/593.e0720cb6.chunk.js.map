{"version":3,"file":"static/js/593.e0720cb6.chunk.js","mappings":"mVAqBA,EAnB2B,SAAHA,GAA8D,IAAxDC,EAASD,EAATC,UAAWC,EAASF,EAATE,UAAWC,EAAYH,EAAZG,aAAcC,EAAGJ,EAAHI,IAAKC,EAAOL,EAAPK,QACnE,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,KAAMP,EAAWQ,OAAQP,EAAUQ,SAAA,EAC1CC,EAAAA,EAAAA,KAACJ,EAAAA,EAAMK,OAAM,CAACC,aAAW,EAAAH,UACvBC,EAAAA,EAAAA,KAACJ,EAAAA,EAAMO,MAAK,CAAAJ,SAAC,2BAEfC,EAAAA,EAAAA,KAACJ,EAAAA,EAAMQ,KAAI,CAAAL,UAACC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,qBAAoBN,SAAEL,OACjDC,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,OAAM,CAAAP,SAAA,EACXC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,QAAQ,UAAUC,QAASlB,EAAUQ,SAAC,YAG9CC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,QAAQ,SAASC,QAAS,kBAAMjB,EAAaC,EAAI,EAAEM,SAAC,gBAMtE,EC6BA,EA5C4B,SAAHV,GAAuD,IAAjDC,EAASD,EAATC,UAAWC,EAASF,EAATE,UAAWmB,EAAmBrB,EAAnBqB,oBAC3CC,GAAWC,EAAAA,EAAAA,QAAyB,MAC1CC,GAAwCC,EAAAA,EAAAA,UAAoB,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1DI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAQG,SAAAI,IAEtC,OAFsCA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAvC,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACIV,GAAgBP,EAAoBO,GAAc,wBAAAQ,EAAAG,OAAA,GAAAL,EAAA,MACrDM,MAAA,KAAAC,UAAA,CACD,OACInC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,KAAMP,EAAWQ,OAAQP,EAAUQ,SAAA,EAC1CC,EAAAA,EAAAA,KAACJ,EAAAA,EAAMK,OAAM,CAACC,aAAW,EAAAH,UACvBC,EAAAA,EAAAA,KAACJ,EAAAA,EAAMO,MAAK,CAAAJ,SAAC,oCAEfJ,EAAAA,EAAAA,MAACC,EAAAA,EAAMQ,KAAI,CAAAL,SAAA,EACPC,EAAAA,EAAAA,KAAA,SAAOK,UAAU,OAAMN,SAAC,mBACxBC,EAAAA,EAAAA,KAAA,SAAO+B,IAAKpB,EAAUqB,SAdG,WAAO,IAADC,GACnB,QAAhBA,EAAAtB,EAASuB,eAAO,IAAAD,OAAA,EAAhBA,EAAkBE,QAASjB,EAAgBP,EAASuB,QAAQC,MAAM,GACtE,EAYkE9B,UAAU,SAAS+B,KAAK,UAClFpC,EAAAA,EAAAA,KAAA,UACIS,QAnBS,WAAO,IAAD4B,EACP,QAAhBA,EAAA1B,EAASuB,eAAO,IAAAG,GAAhBA,EAAkBC,OACtB,EAkBYjC,UAAS,mBAAAkC,OACTtB,EAAe,UAAY,WACxBlB,SAEFkB,EAAeA,EAAauB,KAAO,eAG5C7C,EAAAA,EAAAA,MAACC,EAAAA,EAAMU,OAAM,CAAAP,SAAA,EACXC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,QAAQ,UAAUC,QAASlB,EAAUQ,SAAC,WAG7CkB,IACCjB,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,QAAQ,SAASC,QAAS,SAACgC,GAAWA,EAAMC,iBA3B1D,WAEqCvB,EAAAU,MAAC,KAADC,UAAA,CAyBuCa,EAA0B,EAAG5C,SAAC,gBAOhH,ECmNA,MAtPA,WACI,IAAM6C,GAAWC,EAAAA,EAAAA,MACjBhC,GAA4EC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApFiC,EAA8B/B,EAAA,GAAEgC,EAAiChC,EAAA,GACxEiC,GAA4ElC,EAAAA,EAAAA,WAAS,GAAMmC,GAAAjC,EAAAA,EAAAA,GAAAgC,EAAA,GAApFE,EAA8BD,EAAA,GAAEE,EAAiCF,EAAA,GAExEG,GAAkCtC,EAAAA,EAAAA,UAAkC,MAAKuC,GAAArC,EAAAA,EAAAA,GAAAoC,EAAA,GAAlEE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA4C1C,EAAAA,EAAAA,UAA+B,IAAG2C,GAAAzC,EAAAA,EAAAA,GAAAwC,EAAA,GAAvEE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAA8B9C,EAAAA,EAAAA,WAAS,GAAM+C,GAAA7C,EAAAA,EAAAA,GAAA4C,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAsFpBG,EAA6B,SAACvE,GAClCmD,EAAS,sCAAuC,CAACqB,OAAKC,EAAAA,EAAAA,GAAA,GAAMzE,IAC9D,EACM0E,EAA6B,SAAC1E,GAClCmD,EAAS,wCAAyC,CAACqB,OAAKC,EAAAA,EAAAA,GAAA,GAAMzE,IAChE,EAMM2E,EAAkB,SAAC3E,GACvB8D,GAAa,kBAAM9D,CAAG,IACtBsD,GAAkC,kBAAM,CAAI,GAC9C,EAE2C,SAAAsB,IAoB1C,OApB0CA,GAAAjD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA3C,SAAAC,EAA4C9B,GAAuB,IAAA6E,EAAA,OAAAjD,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAQtC,OAP3B4C,QAAQC,IAAI,qBAAsB/E,GAAIgC,EAAAC,KAAA,EAE5B4C,EAAiB,CACnBG,OAAQ,SACRC,QAAS,CAAE,eAAgB,mBAAoB,OAAU,OACzDC,KAAMC,KAAKC,UAAU,CAAC,CAACC,YAAarF,EAAIqF,YAAaC,QAAStF,EAAIsF,YAEtEhB,GAAW,kBAAM,CAAI,IAAEtC,EAAAE,KAAA,EACjBqD,MAAM,sBAAuBV,GACxBW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAACG,GACLzB,GAAkB,kBAAMyB,CAAI,IAC5BrB,GAAW,kBAAM,CAAK,IACtBhB,GAAkC,kBAAM,CAAK,GAC/C,IAAG,KAAD,EACZwB,QAAQC,IAAI,WAAW/C,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAA4D,GAAA5D,EAAA,SAEvB8C,QAAQC,IAAG/C,EAAA4D,IAAM,yBAAA5D,EAAAG,OAAA,GAAAL,EAAA,mBAEtBM,MAAA,KAAAC,UAAA,CACD,IAAMwD,EAA4B,CAChC,CACEC,UAAW,cACXC,KAAM,cACNC,MAAM,EACNC,UAAU,GAEZ,CACEH,UAAW,UACXC,KAAM,UACNC,MAAM,EACNC,UAAU,GAEZ,CACEH,UAAW,QACXC,KAAM,QACNC,MAAM,EACNC,UAAU,GAEZ,CACEH,UAAW,UACXC,KAAM,UACNC,MAAM,EACNE,cAAc,EACdD,UAAU,EACVE,UA1GgB,SAACC,EAAMpG,EAAKqG,EAAUC,GACxC,OACEpG,EAAAA,EAAAA,MAAAqG,EAAAA,SAAA,CAAAjG,SAAA,EACAC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CACLE,QAAS,WACPuD,EAA2BvE,EAC7B,EAAEM,SACH,UAGDC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CACLE,QAAS,WACP0D,EAA2B1E,EAC7B,EAAEM,SACH,YAGDC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CACLE,QAAS,WACP2D,EAAgB3E,EAClB,EAAEM,SACH,aAML,IAoFMkG,EAAoB,CAExBC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,EAChBC,cAAe,QACfC,YAAa,OACbC,aAAc,OACdC,aAAc,OACdC,cAAe,aACfC,aAAc,WACdC,eAAgB,YAChBC,cAAe,YACfC,WAAW,EAEXC,UAAWpD,EAAeqD,OAC1BC,gBAAiB,CAAE,CACjBxB,KAAM,IAAKyB,MAAO,GACjB,CACDzB,KAAM,KAAMyB,MAAO,IAClB,CACDzB,KAAM,KAAMyB,MAAO,IACnB,CACAzB,KAAM,MAAOyB,MAAOvD,EAAeqD,UAevC,OAXAG,EAAAA,EAAAA,YAAU,WACRnD,GAAW,kBAAM,CAAI,IAErBiB,MAAM,sBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAACG,GACLzB,GAAkB,kBAAMyB,CAAI,IAC5BrB,GAAW,kBAAM,CAAK,GACxB,GACJ,GAAG,IAECD,GACK9D,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAGRC,EAAAA,EAAAA,KAAAgG,EAAAA,SAAA,CAAAjG,UACEJ,EAAAA,EAAAA,MAACwH,EAAAA,EAAS,CAACC,OAAK,EAAArH,SAAA,EACdC,EAAAA,EAAAA,KAACqH,EAAAA,EAAG,CAAAtH,UACAC,EAAAA,EAAAA,KAACsH,EAAAA,EAAG,CAACC,GAAG,KAAIxH,UACRJ,EAAAA,EAAAA,MAAC6H,EAAAA,EAAI,CAAAzH,SAAA,EACDJ,EAAAA,EAAAA,MAAC6H,EAAAA,EAAKvH,OAAM,CAAAF,SAAA,EACRC,EAAAA,EAAAA,KAACwH,EAAAA,EAAKrH,MAAK,CAACsH,GAAG,KAAI1H,SAAC,qCACpBC,EAAAA,EAAAA,KAAA,KAAGK,UAAU,gBAAeN,SAAC,0BAC7BJ,EAAAA,EAAAA,MAAA,OAAKU,UAAU,6EAA4EN,SAAA,EACzFC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACF,UAAU,OAAOI,QAAS,WAxH1DmC,EAAS,wCA0HiB,EAAE7C,SAAC,6BAGLC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACF,UAAU,OAAOqH,MAAO,CAAE,WAAc,QAAUjH,QA3I/D,WAInB,IAAM2E,EAAO,IAAIuC,KAAK,CAAC/C,KAAKC,UAAUnB,EAAgB,KAAM,IAAK,CAAEtB,KAAM,cACnEwF,EAAUC,OAAOC,IAAIC,gBAAgB3C,GACrC4C,EAAOC,SAASC,cAAc,KACpCD,SAAStD,KAAKwD,YAAYH,GAC1BA,EAAKI,KAAOR,EACZI,EAAKK,SAAW,qBAChBL,EAAK1F,QACL2F,SAAStD,KAAK2D,YAAYN,EAC5B,EA+H0GjI,SAAC,+BACjFC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACF,UAAU,OAAOqH,MAAO,CAAE,WAAc,QAAUjH,QAAS,WApH3F0C,GAAkC,EAoHgG,EAAEpD,SAAC,qCAGnHC,EAAAA,EAAAA,KAACwH,EAAAA,EAAKpH,KAAI,CAAAL,UACNC,EAAAA,EAAAA,KAACqH,EAAAA,EAAG,CAAAtH,UACAC,EAAAA,EAAAA,KAACsH,EAAAA,EAAG,CAACC,GAAG,KAAIxH,UACVC,EAAAA,EAAAA,KAACuI,EAAAA,EAAc,CACbC,YAAU,EACVC,SAAS,MACTrD,KAAM1B,EACNgF,QAASpD,EACTqD,YAAYC,EAAAA,EAAAA,IAAkB3C,GAC9B4C,iBAAkB,iCAQ1C7I,EAAAA,EAAAA,KAAC8I,EAAkB,CAACxJ,UAAWwD,EAAgCtD,aAlItE,SAE0CuJ,GAAA,OAAA1E,EAAAxC,MAAC,KAADC,UAAA,EAgIwEvC,UA/L/E,WAClCwD,GAAkC,EACpC,EA8LUtD,IAAK6D,EAAW5D,QAAO,6DAAA6C,OAAwE,OAATe,QAAS,IAATA,OAAS,EAATA,EAAWwB,YAAW,KAAAvC,OAAa,OAATe,QAAS,IAATA,OAAS,EAATA,EAAWyB,YAC7H/E,EAAAA,EAAAA,KAACgJ,EAAmB,CAAC1J,UAAW4D,EAAgCxC,oBAtO3C,SAACuI,GAG5B1E,QAAQC,IAAI,iCAAkCyE,GAC9C,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQH,GAkBxBI,EAAAA,EAAMC,KAAK,cAAeJ,EALX,CACXxE,QAAS,CACL,eAAgB,yBAGoBO,MAAK,SAACC,GAC9CX,QAAQC,IAAIU,EAASE,MACrBzB,EAAkBuB,EAASE,MAC3BjC,GAAkC,EACtC,IAAGoG,OAAM,SAACC,GACNjF,QAAQiF,MAAM,kCAAmCA,GACjDrG,GAAkC,EACtC,GACF,EAuMmH5D,UArM9E,WACnC4D,GAAkC,EACpC,QAwMJ,C","sources":["views/protected/configuration-data/DeleteConfirmation.tsx","views/protected/configuration-data/ImportConfiguration.tsx","views/protected/configuration-data/Configurations.tsx"],"sourcesContent":["import { Modal, Button } from \"react-bootstrap\";\r\n \r\nconst DeleteConfirmation = ({ showModal, hideModal, confirmModal, row, message }) => {\r\n    return (\r\n        <Modal show={showModal} onHide={hideModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Delete Confirmation</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body><div className=\"alert alert-danger\">{message}</div></Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"default\" onClick={hideModal}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={() => confirmModal(row) }>\r\n            Delete\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    )\r\n}\r\n \r\nexport default DeleteConfirmation;","\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst ImportConfiguration = ({ showModal, hideModal, importConfiguration }) => {\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const [uploadedFile, setUploadedFile] = useState<File|null>(null);\r\n    const handleUpload = () => {\r\n        inputRef.current?.click();\r\n    };\r\n    const handleDisplayFileDetails = () => {\r\n        inputRef.current?.files && setUploadedFile(inputRef.current.files[0]);\r\n    };\r\n\r\n    async function  importConfigurationData() {\r\n        uploadedFile && importConfiguration(uploadedFile);\r\n    }\r\n    return (\r\n        <Modal show={showModal} onHide={hideModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Import Spring Configurations</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <label className=\"mx-3\">Choose file: </label>\r\n            <input ref={inputRef} onChange={handleDisplayFileDetails} className=\"d-none\" type=\"file\" />\r\n            <button\r\n                onClick={handleUpload}\r\n                className={`btn btn-outline-${\r\n                uploadedFile ? \"success\" : \"primary\"\r\n                }`}\r\n            >\r\n                {uploadedFile ? uploadedFile.name : \"Upload\"}\r\n            </button>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"default\" onClick={hideModal}>\r\n            Cancel\r\n          </Button>\r\n          {uploadedFile &&\r\n            <Button variant=\"danger\" onClick={(event) => {event.preventDefault(); importConfigurationData();} }>\r\n              Import\r\n            </Button>\r\n          }\r\n        </Modal.Footer>\r\n      </Modal>\r\n    )\r\n}\r\n \r\nexport default ImportConfiguration;","import React, { useEffect, useState } from 'react';\r\nimport { Container, Card, Col, Row } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport axios from 'axios';\r\nimport { ConfigurationModel } from \"./ConfigurationModel\";\r\nimport DeleteConfirmation from \"./DeleteConfirmation\";\r\nimport ImportConfiguration from './ImportConfiguration';\r\n\r\nfunction Configurations() {\r\n    const navigate = useNavigate(); \r\n    const [displayDeleteConfirmationModal, setDisplayDeleteConfirmationModal] = useState(false);\r\n    const [displayImportConfirmationModal, setDisplayImportConfirmationModal] = useState(false);\r\n    \r\n    const [deleteRow, setDeleteRow] = useState<ConfigurationModel|null>(null);\r\n    const [configurations, setconfigurations] = useState<ConfigurationModel[]>([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const importConfigurations = (configIle: File) => {\r\n      // data: ConfigurationModel[]| null\r\n      \r\n      console.log(\">>>>>>>> import configuration:\", configIle);\r\n      const formData = new FormData();\r\n      formData.append('file', configIle);\r\n      // try {\r\n      //     const requestOptions = {\r\n      //         method: 'POST',\r\n      //         headers: {\r\n      //             'content-type': 'multipart/form-data'\r\n      //         },\r\n      //         body: formData,\r\n      //     };\r\n      //     await fetch(\"/api/import\", requestOptions);\r\n      // } catch (err) {\r\n      //     console.log(err);\r\n      // }\r\n      const config = {\r\n          headers: {\r\n              'content-type': 'multipart/form-data'\r\n          },\r\n      };\r\n      axios.post(\"/api/import\", formData, config).then((response) => {\r\n          console.log(response.data);\r\n          setconfigurations(response.data);\r\n          setDisplayImportConfirmationModal(false);\r\n      }).catch((error) => {\r\n          console.error(\"Error uploading spring config: \", error);\r\n          setDisplayImportConfirmationModal(false);\r\n      });      \r\n    }\r\n\r\n    const hideImportConfigurationModal = () => {\r\n      setDisplayImportConfirmationModal(false);\r\n    };\r\n\r\n    const hideDeleteConfirmationModal = () => {\r\n      setDisplayDeleteConfirmationModal(false);\r\n    };\r\n    const detailsLink = (cell, row, rowIndex, formatExtraData) => {\r\n      return (\r\n        <>\r\n        <Button\r\n          onClick={() => {\r\n            editAppConfiurationDetails(row);\r\n          }}\r\n        >\r\n          Edit\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            showAppConfiurationDetails(row);\r\n          }}\r\n        >\r\n          Config\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            showDeleteModal(row);\r\n          }}\r\n        >\r\n          Delete\r\n        </Button>\r\n        </>\r\n      );\r\n      \r\n    };\r\n    const exportConfig = () => {\r\n      // const jsonURL = `data:text/json;chatset=utf-8,${encodeURIComponent(\r\n      //   JSON.stringify(configurations)\r\n      // )}`;\r\n      const data = new Blob([JSON.stringify(configurations, null, 2)], { type: \"text/json\" });\r\n      const jsonURL = window.URL.createObjectURL(data);\r\n      const link = document.createElement(\"a\");\r\n      document.body.appendChild(link);\r\n      link.href = jsonURL;\r\n      link.download = \"spring-config.json\";\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n    const addAppConfiurationDetails = () => {\r\n      navigate(\"/integrator/configuration-form-create\")\r\n    }\r\n    const editAppConfiurationDetails = (row: ConfigurationModel) => {\r\n      navigate(\"/integrator/configuration-form-edit\", {state: {...row}})\r\n    }\r\n    const showAppConfiurationDetails = (row: ConfigurationModel) => {\r\n      navigate(\"/integrator/configuration-app-details\", {state: {...row}}) \r\n    }\r\n    \r\n    const showImportConfigurationModal = () => {\r\n      setDisplayImportConfirmationModal(true);\r\n    }\r\n\r\n    const showDeleteModal = (row: ConfigurationModel) => {\r\n      setDeleteRow(() => row);\r\n      setDisplayDeleteConfirmationModal(() => true);\r\n    }\r\n\r\n    async function deleteAppConfiurationDetails(row: ConfigurationModel) {\r\n      console.log('delete app profile', row)\r\n      try {\r\n          const requestOptions = {\r\n              method: 'DELETE',\r\n              headers: { 'Content-Type': 'application/json', 'accept': '*/*' },\r\n              body: JSON.stringify([{application: row.application, profile: row.profile}]),\r\n          };\r\n          setLoading(() => true);\r\n          await fetch(\"/api/configurations\", requestOptions)\r\n                    .then(response => response.json())\r\n                    .then((data: ConfigurationModel[]) => {\r\n                      setconfigurations(() => data);\r\n                      setLoading(() => false);\r\n                      setDisplayDeleteConfirmationModal(() => false);\r\n                    });\r\n          console.log(\"deleted\");\r\n      } catch (err) {\r\n          console.log(err);\r\n      }\r\n    }\r\n    const configurationTableColumns = [\r\n      {\r\n        dataField: \"application\",\r\n        text: \"Application\",\r\n        sort: true,\r\n        editable: false\r\n      },\r\n      {\r\n        dataField: \"profile\",\r\n        text: \"Profile\",\r\n        sort: false,\r\n        editable: false\r\n      },\r\n      {\r\n        dataField: \"label\",\r\n        text: \"Label\",\r\n        sort: false,\r\n        editable: false\r\n      },\r\n      {\r\n        dataField: \"actions\",\r\n        text: \"Details\",\r\n        sort: false,\r\n        isDummyField: true,\r\n        editable: false,\r\n        formatter: detailsLink,\r\n\r\n      }\r\n    ];\r\n    \r\n    const paginationOptions = {\r\n      // custom: true,\r\n      sizePerPage: 5,\r\n      paginationSize: 5,\r\n      pageStartIndex: 1,\r\n      firstPageText: \"First\",\r\n      prePageText: \"Back\",\r\n      nextPageText: \"Next\",\r\n      lastPageText: \"Last\",\r\n      nextPageTitle: \"First page\",\r\n      prePageTitle: \"Pre page\",\r\n      firstPageTitle: \"Next page\",\r\n      lastPageTitle: \"Last page\",\r\n      showTotal: false,\r\n      // totalSize: 3\r\n      totalSize: configurations.length,\r\n      sizePerPageList: [ {\r\n        text: '5', value: 5\r\n      }, {\r\n        text: '10', value: 10\r\n      }, {\r\n        text: '30', value: 10\r\n      },{\r\n        text: 'All', value: configurations.length\r\n      } ]\r\n    };\r\n\r\n    useEffect(() => {\r\n      setLoading(() => true);\r\n  \r\n      fetch('api/configurations')\r\n        .then(response => response.json())\r\n        .then((data: ConfigurationModel[]) => {\r\n          setconfigurations(() => data);\r\n          setLoading(() => false);\r\n        })\r\n    }, []);\r\n    \r\n    if (loading) {\r\n      return <p>Loading...</p>;\r\n    } else {\r\n      return (\r\n        <>\r\n          <Container fluid>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h4\">Camel Integrator Configurations</Card.Title>\r\n                            <p className=\"card-category\">Application profiles</p>\r\n                            <div className=\"small form-group d-flex align-items-center justify-content-start mt-4 mb-0\">\r\n                              <Button className=\"ml-1\" onClick={() => {\r\n                                  addAppConfiurationDetails();\r\n                                }}>\r\n                                Add Application Profile\r\n                              </Button>\r\n                              <Button className=\"ml-1\" style={{ 'marginLeft': '12px' }} onClick={exportConfig}>Export All Configurations</Button>\r\n                              <Button className=\"ml-1\" style={{ 'marginLeft': '12px' }} onClick={() => { showImportConfigurationModal();}}>Import All Configurations</Button>\r\n                            </div>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row>\r\n                                <Col md=\"12\">\r\n                                  <BootstrapTable\r\n                                    bootstrap4\r\n                                    keyField=\"key\"\r\n                                    data={configurations}\r\n                                    columns={configurationTableColumns}\r\n                                    pagination={paginationFactory(paginationOptions)}\r\n                                    noDataIndication={\"Table is empty\"}\r\n                                  />\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <DeleteConfirmation showModal={displayDeleteConfirmationModal} confirmModal={deleteAppConfiurationDetails} hideModal={hideDeleteConfirmationModal} \r\n              row={deleteRow} message={`Are you sure to delete configurations for application for ${deleteRow?.application}/${deleteRow?.profile}`}  />\r\n            <ImportConfiguration showModal={displayImportConfirmationModal} importConfiguration={importConfigurations} hideModal={hideImportConfigurationModal}  />  \r\n        </Container>\r\n        </>\r\n      );\r\n    }\r\n}      \r\n\r\nexport default Configurations;"],"names":["_ref","showModal","hideModal","confirmModal","row","message","_jsxs","Modal","show","onHide","children","_jsx","Header","closeButton","Title","Body","className","Footer","Button","variant","onClick","importConfiguration","inputRef","useRef","_useState","useState","_useState2","_slicedToArray","uploadedFile","setUploadedFile","_importConfigurationData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","ref","onChange","_inputRef$current2","current","files","type","_inputRef$current","click","concat","name","event","preventDefault","importConfigurationData","navigate","useNavigate","displayDeleteConfirmationModal","setDisplayDeleteConfirmationModal","_useState3","_useState4","displayImportConfirmationModal","setDisplayImportConfirmationModal","_useState5","_useState6","deleteRow","setDeleteRow","_useState7","_useState8","configurations","setconfigurations","_useState9","_useState10","loading","setLoading","editAppConfiurationDetails","state","_objectSpread","showAppConfiurationDetails","showDeleteModal","_deleteAppConfiurationDetails","requestOptions","console","log","method","headers","body","JSON","stringify","application","profile","fetch","then","response","json","data","t0","configurationTableColumns","dataField","text","sort","editable","isDummyField","formatter","cell","rowIndex","formatExtraData","_Fragment","paginationOptions","sizePerPage","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","totalSize","length","sizePerPageList","value","useEffect","Container","fluid","Row","Col","md","Card","as","style","Blob","jsonURL","window","URL","createObjectURL","link","document","createElement","appendChild","href","download","removeChild","BootstrapTable","bootstrap4","keyField","columns","pagination","paginationFactory","noDataIndication","DeleteConfirmation","_x","ImportConfiguration","configIle","formData","FormData","append","axios","post","catch","error"],"sourceRoot":""}