{"version":3,"file":"static/js/118.c29a7214.chunk.js","mappings":"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","sources":["../node_modules/@module-federation/utilities/dist|sync","plugins/refresh-config/refresh-config.tsx","bootstrap.tsx","plugins/refresh-config/index.ts"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 3008;\nmodule.exports = webpackEmptyContext;","import { useCookies } from 'react-cookie';\r\nimport {\r\n  PageSection, \r\n  PageSectionVariants, \r\n  Text, \r\n  TextContent,\r\n  Form,\r\n  FormGroup,\r\n  TextInput,\r\n  ActionGroup,\r\n  Button,\r\n  HelperText,\r\n  HelperTextItem,\r\n  FormHelperText\r\n} from '@patternfly/react-core';\r\nimport React from 'react'\r\nimport { RefreshConfigModel } from './model';\r\n\r\nexport const RefreshConfig: React.FunctionComponent = () => {\r\n  const [mpgPods, setMpgPods] = React.useState('');\r\n  const [ccpayPods, setCcpayPods] = React.useState('');\r\n  const [servicePods, setServicePods] = React.useState('');\r\n  const [isRefreshing, setIsRefreshing] = React.useState<boolean>(false);\r\n  const [refreshResult, setRefreshResult] = React.useState('');\r\n  interface RefreshingPropsType {\r\n    spinnerAriaValueText: string;\r\n    spinnerAriaLabelledBy?: string;\r\n    spinnerAriaLabel?: string;\r\n    isLoading: boolean;\r\n  }\r\n\r\n  const primaryRefreshingProps = {} as RefreshingPropsType;\r\n  primaryRefreshingProps.spinnerAriaValueText = 'Loading';\r\n  primaryRefreshingProps.spinnerAriaLabelledBy = 'primary-loading-button';\r\n  primaryRefreshingProps.isLoading = isRefreshing;\r\n\r\n  const refreshConfig = async () => {\r\n    // const [cookies] = useCookies(['XSRF-TOKEN']);\r\n    \r\n    let refreshConfigUrls: RefreshConfigModel[] = [];\r\n    mpgPods.length > 0 && mpgPods.split(\",\").forEach((pod) =>  refreshConfigUrls.push({\r\n        pod: pod,\r\n        refreshUrl: `http://${pod}:8080/actuator/refresh`\r\n        }));\r\n    ccpayPods.length > 0 && ccpayPods.split(\",\").forEach((pod) =>  refreshConfigUrls.push({\r\n        pod: pod,\r\n        refreshUrl: `http://${pod}:8080/actuator/refresh`\r\n        }));\r\n    servicePods.length > 0 && servicePods.split(\",\").forEach((pod) =>  refreshConfigUrls.push({\r\n        pod: pod,\r\n        refreshUrl: `http://${pod}:8080/actuator/refresh`\r\n        }));\r\n    console.log('Refresh config for ', refreshConfigUrls)\r\n    try {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            // headers: { 'Content-Type': 'application/json', 'accept': '*/*', 'X-XSRF-TOKEN': cookies['XSRF-TOKEN'] },\r\n            headers: { 'Content-Type': 'application/json', 'accept': '*/*' },\r\n            body: JSON.stringify({\r\n                requestHeader: {\r\n                    traceId: '123'\r\n                },\r\n                refreshConfigurations: refreshConfigUrls\r\n            }),\r\n        };\r\n        setIsRefreshing(() => true);\r\n        await fetch(\"/my-camel/admin/api/refreshConfig\", requestOptions)\r\n        // await fetch(\"/api/refreshConfig\", requestOptions)\r\n                    .then(response => response.json())\r\n                    .then((data: any) => {\r\n                      setRefreshResult(() => JSON.stringify(data));\r\n                      setIsRefreshing(() => false);\r\n                    });\r\n        console.log(\"done refreshing\");\r\n    } catch (err) {\r\n        console.log(err);\r\n        setIsRefreshing(() => false);\r\n        setRefreshResult(() => JSON.stringify(err));\r\n    }    \r\n    \r\n  }\r\n  return <>\r\n    <PageSection variant={PageSectionVariants.light}>\r\n      <TextContent>\r\n        <Text component='h1'>Refresh S2I integrator Configurations</Text>\r\n        <Text component='p'>Refresh Configurations of S2I MPG, CCPay and Services integrators</Text>\r\n        (refreshR)\r\n      </TextContent>\r\n      </PageSection>\r\n      <Form isHorizontal>\r\n      <FormGroup label=\"s2i-mpg-integrator Pods\" isRequired fieldId=\"horizontal-form-mpg-pods\">\r\n        <TextInput\r\n          value={mpgPods}\r\n          isRequired\r\n          type=\"text\"\r\n          id=\"horizontal-form-mpg-pods\"\r\n          aria-describedby=\"horizontal-form-mpg-pods-helper\"\r\n          name=\"horizontal-form-mpg-pods\"\r\n          onChange={(_event, value) => setMpgPods(value.trim())}\r\n        />\r\n        <FormHelperText>\r\n          <HelperText>\r\n            <HelperTextItem>Input s2i-mpg-integrator pod URLs</HelperTextItem>\r\n          </HelperText>\r\n        </FormHelperText>\r\n      </FormGroup>\r\n      <FormGroup label=\"s2i-ccpay-integrator Pods\" isRequired fieldId=\"horizontal-form-ccpay-pods\">\r\n        <TextInput\r\n          value={ccpayPods}\r\n          isRequired\r\n          type=\"text\"\r\n          id=\"horizontal-form-ccpay-pods\"\r\n          aria-describedby=\"horizontal-form-ccpay-pods-helper\"\r\n          name=\"horizontal-form-ccpay-pods\"\r\n          onChange={(_event, value) => setCcpayPods(value.trim())}\r\n        />\r\n        <FormHelperText>\r\n          <HelperText>\r\n            <HelperTextItem>Input s2i-ccpay-integrator pod URLs.</HelperTextItem>\r\n          </HelperText>\r\n        </FormHelperText>\r\n      </FormGroup>\r\n      <FormGroup label=\"s2i-service-integrator Pods\" isRequired fieldId=\"horizontal-form-service-pods\">\r\n        <TextInput\r\n          value={servicePods}\r\n          isRequired\r\n          type=\"text\"\r\n          id=\"horizontal-form-service-pods\"\r\n          aria-describedby=\"horizontal-form-service-pods-helper\"\r\n          name=\"horizontal-form-service-pods\"\r\n          onChange={(_event, value) => setServicePods(value.trim())}\r\n        />\r\n        <FormHelperText>\r\n          <HelperText>\r\n            <HelperTextItem>Input s2i-services-integrator pod URLs.</HelperTextItem>\r\n          </HelperText>\r\n        </FormHelperText>\r\n      </FormGroup>\r\n      <ActionGroup>\r\n        <Button \r\n          variant=\"primary\"\r\n          onClick={() => refreshConfig()}\r\n          isDisabled={isRefreshing}\r\n          {...primaryRefreshingProps}\r\n          >\r\n           {isRefreshing ? 'Refreshing' : 'Refresh Config'}\r\n        </Button>\r\n      </ActionGroup>\r\n    </Form>\r\n   \r\n  </>\r\n}\r\n","import { configManager, hawtio, Hawtio, Logger, registerPlugins } from '@hawtio/react'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport { registerMyPlugins } from './plugins'\r\nconst hawtioVersion = '4.1.0'\r\n\r\nconst log = Logger.get('hawtio-console');\r\nlog.info('Hawtio console:', hawtioVersion);\r\n\r\n// Register builtin plugins\r\nregisterPlugins();\r\nregisterMyPlugins();\r\n\r\nhawtio\r\n  // Set up plugin location\r\n  .addUrl('plugin')\r\n  // Bootstrap Hawtio\r\n  .bootstrap();\r\n\r\n// Configure the console version\r\nconfigManager.addProductInfo('Hawtio', hawtioVersion);\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Hawtio />\r\n  </React.StrictMode>,\r\n)\r\n","import { hawtio, HawtioPlugin } from '@hawtio/react'\r\nimport { RefreshConfig } from './refresh-config'\r\n\r\nexport const registerRefreshConfig: HawtioPlugin = () => {\r\n  hawtio.addPlugin({\r\n    id: 'refresh-configurations',\r\n    title: 'Refresh Configurations',\r\n    path: '/refresh',\r\n    component: RefreshConfig,\r\n    isActive: async () => true,\r\n  })\r\n}\r\n"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","id","module","exports","RefreshConfig","mpgPods","setMpgPods","React","ccpayPods","setCcpayPods","servicePods","setServicePods","isRefreshing","setIsRefreshing","refreshResult","setRefreshResult","primaryRefreshingProps","isLoading","_jsxs","_Fragment","children","_jsx","PageSection","variant","PageSectionVariants","light","TextContent","Text","component","Form","isHorizontal","FormGroup","label","isRequired","fieldId","TextInput","value","type","name","onChange","_event","trim","FormHelperText","HelperText","HelperTextItem","ActionGroup","Button","onClick","async","refreshConfigUrls","length","split","forEach","pod","push","refreshUrl","concat","console","log","requestOptions","method","headers","body","JSON","stringify","requestHeader","traceId","refreshConfigurations","fetch","then","response","json","data","err","refreshConfig","isDisabled","hawtioVersion","Logger","get","info","registerPlugins","hawtio","addPlugin","title","path","isActive","addUrl","bootstrap","configManager","addProductInfo","ReactDOM","document","getElementById","render","Hawtio"],"sourceRoot":""}