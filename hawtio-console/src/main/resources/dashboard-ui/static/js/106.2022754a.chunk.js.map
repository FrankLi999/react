{"version":3,"file":"static/js/106.2022754a.chunk.js","mappings":"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","sources":["pages/protected/configuration-data/DeleteConfirmation.tsx","pages/protected/configuration-data/ImportConfiguration.tsx","pages/protected/configuration-data/Configurations.tsx"],"sourcesContent":["import { Modal, Button } from \"react-bootstrap\";\r\n \r\nconst DeleteConfirmation = ({ showModal, hideModal, confirmModal, row, message }) => {\r\n    return (\r\n        <Modal show={showModal} onHide={hideModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Delete Confirmation</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body><div className=\"alert alert-danger\">{message}</div></Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"default\" onClick={hideModal}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={() => confirmModal(row) }>\r\n            Delete\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    )\r\n}\r\n \r\nexport default DeleteConfirmation;","\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst ImportConfiguration = ({ showModal, hideModal, importConfiguration }) => {\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const [uploadedFile, setUploadedFile] = useState<File|null>(null);\r\n    const handleUpload = () => {\r\n        inputRef.current?.click();\r\n    };\r\n    const handleDisplayFileDetails = () => {\r\n        inputRef.current?.files && setUploadedFile(inputRef.current.files[0]);\r\n    };\r\n\r\n    async function  importConfigurationData() {\r\n        uploadedFile && importConfiguration(uploadedFile);\r\n    }\r\n    return (\r\n        <Modal show={showModal} onHide={hideModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Import Spring Configurations</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <label className=\"mx-3\">Choose file: </label>\r\n            <input ref={inputRef} onChange={handleDisplayFileDetails} className=\"d-none\" type=\"file\" />\r\n            <button\r\n                onClick={handleUpload}\r\n                className={`btn btn-outline-${\r\n                uploadedFile ? \"success\" : \"primary\"\r\n                }`}\r\n            >\r\n                {uploadedFile ? uploadedFile.name : \"Upload\"}\r\n            </button>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"default\" onClick={hideModal}>\r\n            Cancel\r\n          </Button>\r\n          {uploadedFile &&\r\n            <Button variant=\"danger\" onClick={(event) => {event.preventDefault(); importConfigurationData();} }>\r\n              Import\r\n            </Button>\r\n          }\r\n        </Modal.Footer>\r\n      </Modal>\r\n    )\r\n}\r\n \r\nexport default ImportConfiguration;","import React, { useEffect, useState } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\nimport { Container, Card, Col, Row } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useErrorBoundary } from '../../../utils/error-boundary/useErrorBoundary';\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport axios from 'axios';\r\nimport { ConfigurationModel } from \"./ConfigurationModel\";\r\nimport DeleteConfirmation from \"./DeleteConfirmation\";\r\nimport ImportConfiguration from './ImportConfiguration';\r\n\r\nfunction Configurations() {\r\n    const [cookies] = useCookies(['XSRF-TOKEN']);\r\n    const { showBoundary } = useErrorBoundary();\r\n\r\n    const navigate = useNavigate(); \r\n    const [displayDeleteConfirmationModal, setDisplayDeleteConfirmationModal] = useState(false);\r\n    const [displayImportConfirmationModal, setDisplayImportConfirmationModal] = useState(false);\r\n    const [displayImportSqlConfirmationModal, setDisplayImportSqlConfirmationModal] = useState(false);\r\n    const [deleteRow, setDeleteRow] = useState<ConfigurationModel|null>(null);\r\n    const [configurations, setconfigurations] = useState<ConfigurationModel[]>([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const importConfigurations = (configIle: File) => {\r\n      // data: ConfigurationModel[]| null\r\n      \r\n      console.log(\">>>>>>>> import configuration:\", configIle);\r\n      const formData = new FormData();\r\n      formData.append('file', configIle);\r\n      // try {\r\n      //     const requestOptions = {\r\n      //         method: 'POST',\r\n      //         headers: {\r\n      //             'content-type': 'multipart/form-data'\r\n      //         },\r\n      //         body: formData,\r\n      //     };\r\n      //     await fetch(\"/my-camel/admin/api/spring-config/import\", requestOptions);\r\n      // } catch (err) {\r\n      //     console.log(err);\r\n      // }\r\n      const config = {\r\n          headers: {\r\n              'content-type': 'multipart/form-data',\r\n              'X-XSRF-TOKEN': cookies['XSRF-TOKEN']\r\n          },\r\n      };\r\n      axios.post(\"/my-camel/admin/api/spring-config/import\", formData, config).then((response) => {\r\n          console.log(response.data);\r\n          setconfigurations(response.data);\r\n          setDisplayImportConfirmationModal(false);\r\n      }).catch((error) => {\r\n          \r\n          console.error(\"Error uploading spring config: \", error);\r\n          showBoundary(error);\r\n          setDisplayImportConfirmationModal(false);\r\n      });      \r\n    }\r\n\r\n    \r\n    const importSqlConfigurations = (configIle: File) => {\r\n      // data: ConfigurationModel[]| null\r\n      \r\n      console.log(\">>>>>>>> import configuration:\", configIle);\r\n      const formData = new FormData();\r\n      formData.append('file', configIle);\r\n      // try {\r\n      //     const requestOptions = {\r\n      //         method: 'POST',\r\n      //         headers: {\r\n      //             'content-type': 'multipart/form-data'\r\n      //         },\r\n      //         body: formData,\r\n      //     };\r\n      //     await fetch(\"/s2i-integrator/config/spring/admin/api/configurations/json\", requestOptions);\r\n      // } catch (err) {\r\n      //     console.log(err);\r\n      // }\r\n      const config = {\r\n          headers: {\r\n              'content-type': 'multipart/form-data',\r\n              'accept': '*/*',\r\n              'X-XSRF-TOKEN': cookies['XSRF-TOKEN']\r\n          },\r\n      };\r\n      axios.post(\"/my-camel/admin/api/spring-config/sql\", formData, config).then((response) => {\r\n          console.log(response.data);\r\n          setconfigurations(response.data);\r\n          setDisplayImportSqlConfirmationModal(false);\r\n      }).catch((error) => {\r\n          console.error(\"Error uploading spring config: \", error);\r\n          showBoundary(error);\r\n          setDisplayImportSqlConfirmationModal(false);\r\n      });      \r\n    }\r\n    const hideImportConfigurationModal = () => {\r\n      setDisplayImportConfirmationModal(false);\r\n    };\r\n    \r\n    const hideImportSqlConfigurationModal = () => {\r\n      setDisplayImportSqlConfirmationModal(false);\r\n    };\r\n    const hideDeleteConfirmationModal = () => {\r\n      setDisplayDeleteConfirmationModal(false);\r\n    };\r\n    const detailsLink = (cell, row, rowIndex, formatExtraData) => {\r\n      return (\r\n        <>\r\n        <Button\r\n          onClick={() => {\r\n            editAppConfiurationDetails(row);\r\n          }}\r\n        >\r\n          Edit\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            showAppConfiurationDetails(row);\r\n          }}\r\n        >\r\n          Config\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            showDeleteModal(row);\r\n          }}\r\n        >\r\n          Delete\r\n        </Button>\r\n        </>\r\n      );\r\n      \r\n    };\r\n    const exportConfig = () => {\r\n      // const jsonURL = `data:text/json;chatset=utf-8,${encodeURIComponent(\r\n      //   JSON.stringify(configurations)\r\n      // )}`;\r\n      const data = new Blob([JSON.stringify(configurations, null, 2)], { type: \"text/json\" });\r\n      const jsonURL = window.URL.createObjectURL(data);\r\n      const link = document.createElement(\"a\");\r\n      document.body.appendChild(link);\r\n      link.href = jsonURL;\r\n      link.download = \"spring-config.json\";\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n    const addAppConfiurationDetails = () => {\r\n      navigate(\"/integrator/configuration-form-create\")\r\n    }\r\n    const editAppConfiurationDetails = (row: ConfigurationModel) => {\r\n      navigate(\"/integrator/configuration-form-edit\", {state: {...row}})\r\n    }\r\n    const showAppConfiurationDetails = (row: ConfigurationModel) => {\r\n      navigate(\"/integrator/configuration-app-details\", {state: {...row}}) \r\n    }\r\n    \r\n    const showImportConfigurationModal = () => {\r\n      setDisplayImportConfirmationModal(true);\r\n    }\r\n\r\n    const showImportSqlConfigurationModal = () => {\r\n      setDisplayImportSqlConfirmationModal(true);\r\n    }\r\n    const showDeleteModal = (row: ConfigurationModel) => {\r\n      setDeleteRow(() => row);\r\n      setDisplayDeleteConfirmationModal(() => true);\r\n    }\r\n\r\n    async function deleteAppConfiurationDetails(row: ConfigurationModel) {\r\n      console.log('delete app profile', row)\r\n      try {\r\n          const requestOptions = {\r\n              method: 'DELETE',\r\n              headers: { 'Content-Type': 'application/json', 'accept': '*/*', 'X-XSRF-TOKEN': cookies['XSRF-TOKEN'] },\r\n              body: JSON.stringify([{application: row.application, profile: row.profile}]),\r\n          };\r\n          setLoading(() => true);\r\n          await fetch(\"/my-camel/admin/api/spring-config/configurations\", requestOptions)\r\n                    .then(response => response.json())\r\n                    .then((data: ConfigurationModel[]) => {\r\n                      setconfigurations(() => data);\r\n                      setLoading(() => false);\r\n                      setDisplayDeleteConfirmationModal(() => false);\r\n                    });\r\n          console.log(\"deleted\");\r\n      } catch (err) {\r\n          console.log(err);\r\n          showBoundary(err);\r\n      }\r\n    }\r\n    const configurationTableColumns = [\r\n      {\r\n        dataField: \"application\",\r\n        text: \"Application\",\r\n        sort: true,\r\n        editable: false\r\n      },\r\n      {\r\n        dataField: \"profile\",\r\n        text: \"Profile\",\r\n        sort: false,\r\n        editable: false\r\n      },\r\n      {\r\n        dataField: \"label\",\r\n        text: \"Label\",\r\n        sort: false,\r\n        editable: false\r\n      },\r\n      {\r\n        dataField: \"actions\",\r\n        text: \"Details\",\r\n        sort: false,\r\n        isDummyField: true,\r\n        editable: false,\r\n        formatter: detailsLink,\r\n\r\n      }\r\n    ];\r\n    \r\n    const paginationOptions = {\r\n      // custom: true,\r\n      sizePerPage: 5,\r\n      paginationSize: 5,\r\n      pageStartIndex: 1,\r\n      firstPageText: \"First\",\r\n      prePageText: \"Back\",\r\n      nextPageText: \"Next\",\r\n      lastPageText: \"Last\",\r\n      nextPageTitle: \"First page\",\r\n      prePageTitle: \"Pre page\",\r\n      firstPageTitle: \"Next page\",\r\n      lastPageTitle: \"Last page\",\r\n      showTotal: false,\r\n      // totalSize: 3\r\n      totalSize: configurations.length,\r\n      sizePerPageList: [ {\r\n        text: '5', value: 5\r\n      }, {\r\n        text: '10', value: 10\r\n      }, {\r\n        text: '30', value: 10\r\n      },{\r\n        text: 'All', value: configurations.length\r\n      } ]\r\n    };\r\n\r\n    useEffect(() => {\r\n      setLoading(() => true);\r\n  \r\n      fetch('/my-camel/admin/api/spring-config/configurations')\r\n        .then(response => response.json())\r\n        .then((data: ConfigurationModel[]) => {\r\n          setconfigurations(() => data);\r\n          setLoading(() => false);\r\n        }).catch(error => {\r\n          showBoundary(error);\r\n        });\r\n    }, []);\r\n    \r\n    if (loading) {\r\n      return <p>Loading...</p>;\r\n    } else {\r\n      return (\r\n        <>\r\n          <Container fluid>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h4\">Camel Integrator Configurations</Card.Title>\r\n                            <p className=\"card-category\">Application profiles</p>\r\n                            <div className=\"small form-group d-flex align-items-center justify-content-start mt-4 mb-0\">\r\n                              <Button className=\"ml-1\" onClick={() => {\r\n                                  addAppConfiurationDetails();\r\n                                }}>\r\n                                Add Application Profile\r\n                              </Button>\r\n                              <Button className=\"ml-1\" style={{ 'marginLeft': '12px' }} onClick={exportConfig}>Export All Configurations</Button>\r\n                              <Button className=\"ml-1\" style={{ 'marginLeft': '12px' }} onClick={() => { showImportConfigurationModal();}}>Import All Configurations</Button>\r\n                              <Button className=\"ml-1\" style={{ 'marginLeft': '12px' }} onClick={() => { showImportSqlConfigurationModal();}}>Import SQL</Button>  \r\n                            </div>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row>\r\n                                <Col md=\"12\">\r\n                                  <BootstrapTable\r\n                                    bootstrap4\r\n                                    keyField=\"key\"\r\n                                    data={configurations}\r\n                                    columns={configurationTableColumns}\r\n                                    pagination={paginationFactory(paginationOptions)}\r\n                                    noDataIndication={\"Table is empty\"}\r\n                                  />\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <DeleteConfirmation showModal={displayDeleteConfirmationModal} confirmModal={deleteAppConfiurationDetails} hideModal={hideDeleteConfirmationModal} \r\n              row={deleteRow} message={`Are you sure to delete configurations for application for ${deleteRow?.application}/${deleteRow?.profile}`}  />\r\n            <ImportConfiguration showModal={displayImportConfirmationModal} importConfiguration={importConfigurations} hideModal={hideImportConfigurationModal}  />\r\n            <ImportConfiguration showModal={displayImportSqlConfirmationModal} importConfiguration={importSqlConfigurations} hideModal={hideImportSqlConfigurationModal}  />  \r\n        </Container>\r\n        </>\r\n      );\r\n    }\r\n}      \r\n\r\nexport default Configurations;\r\n"],"names":["_ref","showModal","hideModal","confirmModal","row","message","_jsxs","Modal","show","onHide","children","_jsx","Header","closeButton","Title","Body","className","Footer","Button","variant","onClick","importConfiguration","inputRef","useRef","uploadedFile","setUploadedFile","useState","ref","onChange","handleDisplayFileDetails","_inputRef$current2","current","files","type","handleUpload","_inputRef$current","click","name","event","preventDefault","async","importConfigurationData","cookies","useCookies","showBoundary","useErrorBoundary","navigate","useNavigate","displayDeleteConfirmationModal","setDisplayDeleteConfirmationModal","displayImportConfirmationModal","setDisplayImportConfirmationModal","displayImportSqlConfirmationModal","setDisplayImportSqlConfirmationModal","deleteRow","setDeleteRow","configurations","setconfigurations","loading","setLoading","importConfigurations","configIle","console","log","formData","FormData","append","config","headers","axios","post","then","response","data","catch","error","importSqlConfigurations","hideImportConfigurationModal","hideImportSqlConfigurationModal","hideDeleteConfirmationModal","exportConfig","Blob","JSON","stringify","jsonURL","window","URL","createObjectURL","link","document","createElement","body","appendChild","href","download","removeChild","editAppConfiurationDetails","state","showAppConfiurationDetails","showDeleteModal","configurationTableColumns","dataField","text","sort","editable","isDummyField","formatter","detailsLink","cell","rowIndex","formatExtraData","_Fragment","paginationOptions","sizePerPage","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","totalSize","length","sizePerPageList","value","useEffect","fetch","json","Container","fluid","Row","Col","md","Card","as","style","BootstrapTable","bootstrap4","keyField","columns","pagination","paginationFactory","noDataIndication","DeleteConfirmation","requestOptions","method","application","profile","err","ImportConfiguration"],"sourceRoot":""}