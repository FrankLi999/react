---
version: "3.9"
x-default-logging: &logging
  # driver: "json-file"
  # options:
  #   max-size: "5m"
  #   max-file: "2"
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'  
networks:
  vpcbr:
    driver: bridge
    ipam:
      config:
      - subnet: 10.5.0.0/16
services:
  # https://developer.hashicorp.com/consul/tutorials/day-0/docker-container-agents
  consul-server:
    image: hashicorp/consul:1.15
    container_name: consul-server
    command: ["consul", "agent", "-config-file=/config/config.hcl", "-config-dir=/config"]
    volumes:
    - "./consul:/config"
    ports:
    - 8500:8500
    networks:
      vpcbr:
        ipv4_address: 10.5.0.2
    logging: *logging

  node-exporter:
    image: prom/node-exporter:v1.1.2
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      vpcbr:
        ipv4_address: 10.5.0.7
    ports:
      - 9100:9100
    logging: *logging
  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus.yml
    entrypoint:
      - /bin/prometheus
      - --config.file=/etc/prometheus.yml
    networks:
      vpcbr:
        ipv4_address: 10.5.0.8
    ports:
      - "9092:9090"
    logging: *logging
  tempo:
    image: grafana/tempo:1f1c40b3
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    networks:
      vpcbr:
        ipv4_address: 10.5.0.9
    ports:
      - "14268:14268" # jaeger ingest
      - "3200"  # tempo
      - "9412:9411" #zipkin
      # - "4318:4318"  # otlp http
      - "4317"  #otlp grpc
    logging: *logging
  grafana:
    image: grafana/grafana:9.2.15
    container_name: grafana
    restart: always
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    networks:
      vpcbr:
        ipv4_address: 10.5.0.10
    ports:
      - "3000:3000"
    logging: *logging
  #{container_name="web"} |= "trace_id"
  loki:
    image: grafana/loki:2.1.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      vpcbr:
        ipv4_address: 10.5.0.11
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    logging: *logging
  # # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.80.0
    container_name: otelcol
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "4317:4317"      # OTLP over gRPC receiver
      - "4318:4318"      # OTLP over HTTP receiver
      - "55680:55680"
      # - "9411:9411"
      - "9464:9464"     # Prometheus metrics exposed by the collector
      - "8888:8888"     # metrics endpoint
      - "13133:13133" # health_check extension
    depends_on:
      - tempo
      - loki
      - prometheus
      # - jaeger
    networks:
      vpcbr:
        ipv4_address: 10.5.0.18
    logging: *logging
  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   ports:
  #     - "16686:16686"
  #     - "14250"
  #   logging: *logging  
  #   networks:
  #     vpcbr:
  #       ipv4_address: 10.5.0.19    
  # zipkin:
  #   image: openzipkin/zipkin-slim:latest
  #   networks:
  #     - otelcol
  #   ports:
  #     - "9412:9411"        
  ingress:
    image: nicholasjackson/fake-service:v0.21.0
    container_name: ingress
    depends_on:
      - "consul-server"
    environment:
      LISTEN_ADDR: 0.0.0.0:9090
      UPSTREAM_URIS: "http://localhost:9091"
      MESSAGE: "Hello World"
      NAME: "Ingress"
      SERVER_TYPE: "http"
      TIMING_50_PERCENTILE: 30ms
      TIMING_90_PERCENTILE: 60ms
      TIMING_99_PERCENTILE: 90ms
      TIMING_VARIANCE: 10
      TRACING_ZIPKIN: "http://tempo:9411"
    ports:
    - "9090:9090"
    networks:
      vpcbr:
        ipv4_address: 10.5.0.3
    logging: *logging
  ingress_proxy:
    image: nicholasjackson/consul-envoy:v1.6.1-v0.10.0
    container_name: ingress_proxy
    depends_on:
      - "ingress"
    environment:
      CONSUL_HTTP_ADDR: 10.5.0.2:8500
      CONSUL_GRPC_ADDR: 10.5.0.2:8502
      SERVICE_CONFIG: /config/ingress_v1.hcl
      CENTRAL_CONFIG: "/central_config/ingress_defaults.hcl"
    volumes:
    - "./fake-service/service_config:/config"
    - "./fake-service/central_config:/central_config"
    command: ["consul", "connect", "envoy", "-sidecar-for", "ingress-v1"]
    network_mode: "service:ingress"
    logging: *logging

  web:
    image: nicholasjackson/fake-service:v0.21.0
    container_name: web
    depends_on:
      - "consul-server"
    environment:
      LISTEN_ADDR: 0.0.0.0:9090
      UPSTREAM_URIS: "grpc://localhost:9091"
      MESSAGE: "Web response"
      NAME: "Web"
      SERVER_TYPE: "http"
      HTTP_CLIENT_APPEND_REQUEST: "true"
      TIMING_50_PERCENTILE: 20ms
      TIMING_90_PERCENTILE: 30ms
      TIMING_99_PERCENTILE: 40ms
      TIMING_VARIANCE: 10
      TRACING_ZIPKIN: "http://tempo:9411"
    networks:
      vpcbr:
        ipv4_address: 10.5.0.4
    logging: *logging
  web_proxy:
    image: nicholasjackson/consul-envoy:v1.6.0-v0.10.0
    container_name: web_proxy
    depends_on:
      - "web"
    environment:
      CONSUL_HTTP_ADDR: 10.5.0.2:8500
      CONSUL_GRPC_ADDR: 10.5.0.2:8502
      SERVICE_CONFIG: /config/web_v1.hcl
      CENTRAL_CONFIG: "/central_config/web_defaults.hcl"
    volumes:
    - "./fake-service/service_config:/config"
    - "./fake-service/central_config:/central_config"
    command: ["consul", "connect", "envoy", "-sidecar-for", "web-v1"]
    network_mode: "service:web"
    logging: *logging

  api:
    image: nicholasjackson/fake-service:v0.21.0
    container_name: api
    depends_on:
      - "consul-server"
    environment:
      LISTEN_ADDR: 0.0.0.0:9090
      MESSAGE: "API response"
      NAME: "API"
      SERVER_TYPE: "grpc"
      TIMING_50_PERCENTILE: 1ms
      TIMING_90_PERCENTILE: 2ms
      TIMING_99_PERCENTILE: 3ms
      TIMING_VARIANCE: 10
      TRACING_ZIPKIN: "http://tempo:9411"
      ERROR_RATE: 0.2
      ERROR_CODE: 14
      ERROR_TYPE: "http_error"
    networks:
      vpcbr:
        ipv4_address: 10.5.0.5
    logging: *logging
  api_proxy:
    image: nicholasjackson/consul-envoy:v1.6.0-v0.10.0
    container_name: api_proxy
    depends_on:
      - "api"
    environment:
      CONSUL_HTTP_ADDR: 10.5.0.2:8500
      CONSUL_GRPC_ADDR: 10.5.0.2:8502
      SERVICE_CONFIG: /config/api_v1.hcl
      CENTRAL_CONFIG: "/central_config/api_defaults.hcl"
    volumes:
    - "./fake-service/service_config:/config"
    - "./fake-service/central_config:/central_config"
    command: ["consul", "connect", "envoy", "-sidecar-for", "api-v1"]
    network_mode: "service:api"
    logging: *logging