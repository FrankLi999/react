# Adding SameSite=Strict for session cookie is recommended
server:
  port: 8080
  shutdown: graceful
  servlet.session.cookie.same-site: strict
spring:
  application:
    name: camel-dashboard
  profiles.active: 
    - jdbc
    - ${SPRING_PROFILES_ACTIVE:local}
  jmx.enabled: true
  # sql.init.platform: h2    
  sql.init.platform: oracle    
  # sql.init.platform: postgresql   
#  datasource:
#    # platform: oracle
#    # url: jdbc:h2:mem:configdb
#    # driver-class-name: org.h2.Driver
#    # username: sa
#    # password: sa
#    # platform: postgresql
##    driver-class-name: org.postgresql.Driver
##    url: jdbc:postgresql://localhost:5432/postgres
##    username: postgres
##    password: 123456
#    driver-class-name: oracle.jdbc.OracleDriver
#    url: jdbc:oracle:thin://localhost:1521/FREE
#    username: C##Camel
#    password: Passw0rd
#    hikari:
#      connection-timeout: 5000
#      maximum-pool-size: 10
#  cloud:
#    config:
#      server:
#        jdbc:
#          sql: SELECT PROP_KEY, PROP_VALUE from APP_PROPERTIES where APPLICATION=? and PROFILE=? and LABEL=?
#          order: 1
  security:
    user:
      name: s2i
      password: s2i  

  webflux:
    multipart:
      max-in-memory-size: 512KB
      max-parts: 3
      max-disk-usage-per-part: 1024KB
      max-headers-size: 5KB      
  r2dbc:
    # url: r2dbc:h2:mem:configdb
    # username: 'sa'
    # password: 'sa'
#    url: r2dbc:postgresql://localhost:5432/postgres
#    username: postgres
#    password: 123456
    ##oracle
    url: r2dbc:oracle://localhost:1521/FREE
    username: C##Camel
    password: Passw0rd
    # url: r2dbc:oracle//localhost:1521/svc_name
  # h2.console:
  #   # Required for h2-console server
  #   enabled: true
  #   # Optional variable /h2-console forward from the path to session created h2 console server uri
  #   path: /h2-console
  #   # Optional h2 console port if not set or set 0, available port is given
  #   port: 8082
management:
  endpoints:
    health:
      enabled: true
      show-details: always
      # expose liveness/readiness probes
      probes:
        enabled: true
    web.exposure.include: health, info,hawtio,jolokia
  # Information for Spring Boot Info endpoint
  info:
    env.enabled: true
    java.enabled: true
    app.name: ${spring.application.name}
  server.port: ${server.port}

logging.level:
  com.example: DEBUG
  io.hawt: INFO
  org.springframework: WARN

camel:
  springboot.name: ${spring.application.name}

# Uncomment these properties to enable the Camel plugin Trace tab
#camel.springboot.tracing=true
#camel.springboot.backlog-tracing=true
#camel.springboot.use-breadcrumb=true

hawtio:
  authenticationEnabled: false
  http:
    enableCORS: true
    proxyAllowlist: "*"
#
# Hawtio properties to change the behaviours for HTTP headers
# (Hawtio version >2.15.1)
#

# By default, Access-Control-Allow-Origin is no more sent.
# To send the HTTP header, uncomment the following line.
#hawtio.http.enableCORS=true

# When hawtio.http.enableCORS=true is set, Hawtio by default sends:
#
#   Access-Control-Allow-Origin: *
#
# You can customise the header value with the following property.
#hawtio.http.accessControlAllowOrigin=https://example.com

# By default, Hawtio sends the following HTTP headers:
#
#   X-Frame-Options: DENY
#   Content-Security-Policy: frame-ancestors 'none'
#
# By uncommenting the following line, these headers are changed like these
# (the behaviour in 2.15.1 and before):
#
#   X-Frame-Options: SAMEORIGIN
#   Content-Security-Policy: frame-ancestors 'self'
#
#hawtio.http.allowXFrameSameOrigin=true

# By default, Hawtio sends the following HTTP header:
#
#   Referrer-Policy: strict-origin
#
# You can customise the header by setting the following property.
#hawtio.http.referrerPolicy=no-referrer


